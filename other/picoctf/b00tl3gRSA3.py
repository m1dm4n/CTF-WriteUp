from functools import reduce
from Crypto.Util.number import inverse, long_to_bytes
tmp = """10407068741 14105808169 11375965891 15705762389 12991637567 9390331087 15923432341 13806386831 10367181343 12246949213 10606126879 11870114023 11954470861 13169827267 13693026131 9657769607 12384723853 11429558501 11419941829 8780559259 13982461793 14538934351 10394838427 15647871199 16171314377 16135857809 13680804569 14306184223 14154369041 11535275027 16046362757 10568608493 9990855019 13103233933""".split(
    " ")
n = 20341370152114992468443605853504195236957659721970924043488025121386480273436268010584490223839513180555996160536437978288938322374624398958314321798470938852280906035164863776338488149816542422333942503990302885696718285883215835034534829101530642361718659588959532838709952367559178116468717673064909448457469502030924113218100932008842607159
e = 65537
c = 11050978088272904194152332510846305528148585440772949520918215787258746646616481199358215946682067123730624831178363144507090289302957829402304202256170820276806779073412219285786010963613738824101242109088776438274078864255633725162655910011228217164761588867576383630915894093786646446449064298210432668586993388087944350025687592450268770358

primes = list(map(lambda a: int(a), tmp))

print(primes)
phi = 1

for p in primes:
    phi *= p - 1
d = inverse(e, phi)
print(d)
print(long_to_bytes(pow(c, d, n)))
