from sage.all_cmdline import *
from Crypto.Util.number import long_to_bytes as ltb, bytes_to_long as btl

n = 10188993979011786220431108857653589763723659512955737638143689572106527827902231962966857328752600928326994158175663043906957054825348493277133099799455861
leak = [808802526583151782937915035989917614780965128035401340226754724355302137730460434459416977794085747448917839593142541059428750338810519774955607218184647, 4487983961933168627339852287703529989233741047924916595757234381228502742965391845613924699417037364631466539705601291738660071745535792715916891353923104, 120792969606080798742998241005436179380284644229883554644076026261623257399787125063335823974104304286365432966906240282076726295522911329749978421889846, 6389323846396142357309662062840661592519579936000523447878118543962799015398981187910106997263705840351272607849578991413752899452981664007417659107565602, 12677192252415097482210842097470152998994093698702694748659393601920431448021091345648254534291266598254726417354085365421084058007170250271057800823070089, 12776935989534727633772018167623084553190569459231610036078997479547621254676458983064360508551476602213073105501396086454074610442552646141320393033231995, 463739642904418438712007078254788808534253323609082892812791143665068392176960306189581273015607993601059256886417816383525439870406778698779371313616118, 4723790674592004809363745411346847929221853333448843867054335658882151055797771554648651283138949123333825738666719071179217047576436468728508085138800489, 4396229417338892754788002390328983112922665105735278749986539449872539717637849838410062910069258805662875548756543219820765266566950288653172827958211604, 6010481059793583219366149599990314793468299350544619437685105614286245869553013757348850634739022330079167084103359786260754986417341329657021283786298684, 1904905368957421602035966409490860164073221111949048157296030428120998374801122480234507509469788213756321138377296264663070920217999358047970699147865571, 11774932835648153892863296806977762918313003418798617192168395715469651510010737145642066826737701031380415672440132635151540652079722865687196202583079509, 7431159470498847932578129075417571628451975213998326317950837533467313503093206042545605331665963293823800043608521617196128319793807233356170705282403692, 11178501037441926744173552759996348777416359828191037629524648591855558550506574839358552443606835107206804621318249681676749315690033558187274684790484287, 8610076867948423468442096216068146224841645208605502978935753520547902539531174039435170172468072969257805058244504315157849723234095881332385810677714817, 4244583650988276085102958189715827894334143601485004636821024124153899738427287707023756602876745347096454944475591539029848469168019468983438844303326061, 12965611400430482690087983319270386958304004927799037315977736185678037044860871119557270095083182856220815942972010549320314219907218733447057324981451147, 1632776046808690195046923045441322998606247531224729665460075381447732891768815781349753565864970003651550348052909904294334180334651608961716236720181582, 1289235803384545875947606398297109292644444294446710101120706054824752924305366138083578936982125450035871309269669521314994290902248795391697079944459375, 11827707491980562021052682078233533752464908117529585129794593075763726538524958610844990021802159246716970833510937001372390186313126136447864738883083753, 6566151125156184525989829274056777062612889644541108335899930535669517780501550963303197028053167487815925937302085372483659760728969172204836881581807236, 4885334402026158586951009368148982082677311737050984928259731596014010370917621277838873469657418696228676317486403535512484485844346190918271032637645866, 10215023826421662165702657824159599907295607129805017584474138873009069408357962561502267454979797645442635726438588049679576717656364541355507212115445053, 4532875598351972924460748265153643149942785643219813635655437273934338285898736203006828651897619700989906385775027011686777713619634775625730927312095533, 1062939774309332857060579765217704467004293299993782318563249179928110582007691935558888358428611075724609711817037800261785107036538677442611039734434117, 5037736434960752455853108605058405776420836946093565757713668333564931395276196087043783983052536284514052402225003465249384171886892335781933525980026296, 9460614469808984527122826507499637018570100902245200574792301927963485495586675267439289050486658644787322126788932645987739127528753677673804735476584170, 4495136587797965183619059176628704280955659989429574692968963230796436238756239263315023443674615822440393049945723976068084107927113914845933198608149286, 7655354620071215504438509066984016836502459130556892066429769529591826610206040491173976696756188005447758774965249271039058741996412877645062897327388387]
enc = '0ff90d47e089441ebb812cc77a4c57871a70c9f8f654e8bd4e65b27d16a5653b5504e117873f6663293e26949474cb9de3a2bcc5a8f1e5d5d818f450c5e80ad4f838395b683d08d6bbb5d1764254a96da65f0f2d45a21cb232774952a52a22f4d835da6f0b9b50992f1c12ba35f06f745adad13fd287a7c9d4690a456342d4c741645fc7e048ce314f5baa0f60ed28e69196183c469ab5eab1c91dabdfb58c354cb5c81b08b748cd96334ba856bb3740047958934c0ff5f548aecb26d6a3496f502920e8e3956a5c4186c6a34bf6ec6a357516d3fb477d170da6bc50b3bd0551fe2e67ab4e3157035c4598296294a2eaa30bcff3bd934817147bb836d32665cea77db9ce68854e6fc900e8a498a02501da3acfc91dc3d598cc5c9168b1a09839c270dbb5cb8a58a94cd256e2fa9dc953287e95fff083d77b0ada85ee3b219e9e5aa600e2ebe7a4576004302bf7054c0bb2c4f4e95a430211c83ff8b83f2b3a8a2271ce0ca04efe874a2952e689dc75f4ef9c4ba185d11ec6e3b9d7ebd7c4c8d99688c3083003cf583632936bb24e25ad067e11bd2dd233c14346d9e625b4f037a46c6059320faa4c2791008044617484634803c7fb9c3ddad19c32d4a25216748ffc3283328c75500c33de7ace5d4eb3248db9519eea3b0e8220046c3dd1fa6350a00cbe0697452ac23c066d501568f9146238b3ba7ebc6f10025962131c4fcb45ee03b09fd21db2dc19c2d6830c2a69f0c291bd69713190c35e4892d5634a81f328a375721969a0250b3a4383c42c6a4f3acfe7cda67ed6f95088d0f0e8639f32985dbf35215f872b6e6a4e19cb5a96e2f3184d883c95b207948e8969526c6de06caa3ae0b7993f7b55ff57104c74eb588ccb724acf968e62ca57397b3001eacbb9aed7c6d00c7cc0c3ea9fb7064cf0cf78f6af04ed6f33eae83eb0c9eeb9b7a10e36e3d9c6fa8a46b1c0dc50ec201ec03e7e4556bbd1759f0f5748f50339c2e88836f1a76f9cb8e6e1b6877223287ef62790fdaa6077d73b3458d9943bca7d574e0c1a78472b860188452837b04989c6a6ed66ca64f8fb4fb276eacf3869aa1ae0f6556225289091aa1ea735504c47acd9d8ca9ac8e1502b0744b139d0434fdbe368200683b0c3c0abeed9d5404e78056924e798e40fd4950750da226e8b7282fcc58f532180c5078a920c98f6ab1d54821024a19c23a8c13cc412cdab79c19dd36b813d468fbaf6cdda1250b30a7f093f2b3028cc3323dde020493fb0fe5f4f32ae454e36517ca5ff2942e5da2a30ff98bc83f4d1310e093bb761758b224d415e9764b1ae2fe4b577e1cdc55517cc30d3ae5b2348c85ed087590a6857f6de6249d44dbd9bd94c0dd4ed6c1fc0970d1cf72bb417feebf7ed49370f2c4abad68cb2298b48514b6a526f75af83c2ea504039ea8d3770f7ef61da988279b01a9e110b0a6a855859f83558ccdfdfb6eb55c8a2e7de9f1144b86243d063dfaedd3983b9621e9a01f8be03e84e24d014396891e532ed389ec9d0f3002be756787017d932ac05f686be12c1159ac964cc46846882f98b717d54cddeb0ce03d7562b3cf090f1c630b9d55d3a6d7403408224878b01644a17fa4a854e058dc6aac2db910341ffa502b1fb573e65e4a7aac0eb6561692660240cfca4d17250b3cc7dd05500796bc7e29686723685eb8cd72d57bf72cbe361d5ce6cdd5765b5c8ce240be8a08612571db4ace8ee5b5e8735bf331a3d4e0e3a0990c38d52de728a734300ea6f855829987b6b8fd8469c9239c6fb67ead8243c2b8a1119469873dd41196c901f9246fe7635256c9a9176ac751bbbfdae3672247f12ae715f304df2f437a913c5ca6097c042e035b1ec9cb2accefa0a9a83342e56944790d6025aa9463f3c72e0866b183315f1d2633ca3162c2340be980021eb1a09fd091d73f7a87aa38bb68f9c22bd328186aee3120308334995055a7b0ad78f4d8792e5f1900e988925488d267c0d20b4e7d9ccd0eb4a60e3c65148034dde9984623a513ce12d49b6ba8ced33c74b085c85c47e87bb329ce5b86a3bd36f004bea21dea42934c60371da981220128e0396cf327ae1cc62d691f20b7ac919c8af00f85f5d5b281a05b7c7e9953e93c907a74bc6f30bc29e1021249040171adc345532c79b63d4c5a78a156e5ae421ec1cf9b2b9a66e771cdc97614af2b47e20eb649625c47c231f520ead1f23acf6ffc4ceefe94f4d7aa96772d1302b5ff9be4b43ee8498deca734623dbdd066557104d482e4ef93ee8e6b37a0d92bbb50008b21f9fa244522d85cc0674e3449672c48f30a50635889ffc29aefb4fb8660243c6f8a544ec16b041b5607d3bd81464ec9f50d56c2fed51d9899887cd8867ab57dc1c2456bb8d5975093ec8fa253e2eb46b62a47d3b2818c859de0efcb06d893dcec1970e306baa2558ba3fad47dc88364a39ab2711a7e06026d98486523a66092427b242ff1201e7cd1d20d756ba57876dee2c9a794e3906b9d5652a9cce08c2af063db3eb0084de194ed05a9bd601025baa5fd8cc9cf2fd3c6bf3766729e3c466b8e55f69a67308fdf102563b3728c11e2d0e70a2f71976cd65901294137068dd312509ed4152c2b947e0a6'
g = 0x10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b


# Construct lattice
l = 3
encs = [int(enc[128*i: 128*(i+1)], 16) for i in range(len(leak))]
mat = matrix(ZZ, l+2, l+2)
for i in range(l):
    mat[i, i] = g
    mat[-2, i] = -leak[i]
    mat[-1, i] = encs[i]
mat[-2, -2] = 1
mat[-1, -1] = 1

# reduce lattice 
target_vector = [2**256]*l + [2**256, 1]
bound_mat = matrix.diagonal([2**256//i for i in target_vector])
mat *= bound_mat
matL = mat.LLL()
matL /= bound_mat

# get p and get flag
p = matL[0][-2]
q = n//p
flag = b""
for i in range(len(encs)):
    flag += ltb((encs[i] ^ p) * inverse_mod(n, g) % g)
print(flag)
