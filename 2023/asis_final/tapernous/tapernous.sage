#!/usr/bin/env sage

# from secret import params, flag
params = (12, 172)
flag =b"ASIS{12983718ou23qtewgwiuaediauskdhasdyeiqujwhdna}"

def ginv(f, g):
	d, u, v = xgcd(f, g)
	return u.mod(g)

def ircp(t):
	while True:
		f = R.random_element(degree = t)
		if f.is_irreducible():
			g = R.random_element(degree = 13 + 37 * t)
			u = ginv(f, g)
			if u != 0:
				return f

def i2F(i, F):
	z, c = F.gen(), F.cardinality()
	l = log(c, 2)
	R.<z> = PolynomialRing(F)
	assert i < c
	coeffs = [int(_) for _ in list(bin(i)[2:].zfill(l))]
	poly = R(coeffs)
	return poly

def encode(msg, F, f):
	z, c = F.gen(), F.cardinality()
	l = F.cardinality()
	R = PolynomialRing(F, 'x')
	S = R.quotient(f, 'x')
	e, epoly = 0, S(0)
	for i in msg:
		epoly += i2F(i, F)(z) * S('x') ** e
		e += 1
	return epoly

def F2i(f):
	return int(''.join(map(str, list(f))), 2)



def decode(f, n=None):
    if n == None:
        return list(map(F2i, list(f)))
    return list(map(F2i, list(f)[:n]))

def encrypt(msg, F, f):
	_enc = encode(msg, F, f)
	_r = randint(1, len(msg))
	for _ in range(_r):
		print(decode(_enc, 5));_enc = _enc ** 2
	return _r, _enc

# m, t = params
# F = GF(2**m)
# R = PolynomialRing(F, 'x')
# f = ircp(t)

m = 12
t = 172
F, z12 = GF(2**m).objgen()
R, x = PolynomialRing(F, 'x').objgen()
f = (z12**11 + z12**2 + 1)*x**171 + (z12**8 + z12**7 + z12**6 + z12**5 + z12**4 + z12**3 + 1)*x**170 + (z12**10 + z12**9 + z12**7 + z12**5 + z12**4 + z12**3 + 1)*x**169 + (z12**4 + z12)*x**168 + (z12**11 + z12**10 + z12**9 + z12**2 + z12 + 1)*x**167 + (z12**11 + z12**5 + z12**3 + 1)*x**166 + (z12**10 + z12**9 + z12**7 + z12**6 + z12**5 + z12**4 + z12**2)*x**165 + (z12**10 + z12**7 + z12**6 + z12**4 + z12**3 + 1)*x**164 + (z12**11 + z12**8 + z12**4 + z12**3 + z12**2 + z12)*x**163 + (z12**9 + z12**8 + z12**7 + z12**6 + z12**4)*x**162 + (z12**10 + z12**9 + z12**8 + z12**4)*x**161 + (z12**11 + z12**8 + z12**6 + z12**5 + z12**3 + z12**2 + z12 + 1)*x**160 + (z12**8 + z12**7 + z12 + 1)*x**159 + (z12**11 + z12**10 + z12**9 + z12**8 + z12**7 + z12**5 + z12**4 + 1)*x**158 + (z12**11 + z12**9 + z12**6 + z12**3 + 1)*x**157 + (z12**10 + z12**9 + z12**8 + z12**6 + z12**5 + z12**4 + z12**3 + z12**2 + z12 + 1)*x**156 + (z12**4 + z12**2 + z12 + 1)*x**155 + (z12**11 + z12**10 + z12**8 + z12**5 + z12**2)*x**154 + (z12**9 + z12**6 + z12**5 + z12**4 + z12**2 + z12)*x**153 + (z12**11 + z12**10 + z12**9 + z12**8 + z12**7 + z12**5 + z12**2)*x**152 + (z12**11 + z12**9 + z12**8 + z12**7 + z12**3 + z12**2)*x**151 + (z12**10 + z12**9 + z12**8 + z12**7 + z12**4 + z12**2 + 1)*x**150 + (z12**11 + z12**9 + z12**7 + z12**5 + z12**4 + 1)*x**149 + (z12**11 + z12**9 + z12**8 + z12**7 + z12**5 + z12**4 + z12**3 + z12**2 + z12)*x**148 + (z12**10 + z12**8 + z12**6 + z12**5 + z12**3 + z12**2 + 1)*x**147 + (z12**10 + z12**7 + z12**6 + z12**4 + z12 + 1)*x**146 + (z12**7 + z12**4 + 1)*x**145 + (z12**10 + z12**9 + z12**6 + z12**5 + z12**2 + z12)*x**144 + (z12**4 + z12**3 + z12**2 + z12)*x**143 + (z12**5 + z12**4 + z12**3 + z12**2 + 1)*x**142 + (z12**11 + z12**9 + z12**3 + z12**2 + z12 + 1)*x**141 + (z12**8 + z12**7 + 1)*x**140 + (z12**7 + z12**5 + z12**4 + z12**2 + z12 + 1)*x**139 + (z12**10 + z12**8 + z12**7 + z12**4 + z12**3 + z12**2)*x**138 + (z12**11 + z12**9 + z12**5 + z12**4 + z12 + 1)*x**137 + (z12**10 + z12**8 + z12**5 + z12**3 + z12 + 1)*x**136 + (z12**11 + z12**9 + z12**6 + z12**5 + z12**2)*x**135 + (z12**10 + z12**7 + z12**4 + z12**3 + z12**2 + z12)*x**134 + (z12**6 + z12**5)*x**133 + (z12**9 + z12**7 + z12**6 + z12**5 + z12**3 + z12**2)*x**132 + (z12**11 + z12**10 + z12**7 + z12**6 + z12**2 + 1)*x**131 + (z12**11 + z12**10 + z12**8 + z12**7 + z12**5 + z12**4 + z12**3 + z12**2 + z12 + 1)*x**130 + (z12**11 + z12**8 + z12**6 + z12**5 + z12**4 + z12**3)*x**129 + (z12**11 + z12**10 + z12**9 + z12**6 + z12**5 + z12**4 + z12**3 + 1)*x**128 + (z12**11 + z12**8 + z12**6 + z12**5 + z12**4 + z12**3 + z12**2 + z12)*x**127 + (z12**11 + z12**9 + z12**5 + z12**4 + z12**2 + z12)*x**126 + (z12**10 + z12**9 + z12**8 + z12**6 + z12**4 + z12**2)*x**125 + (z12**11 + z12**10 + z12**9 + z12**8 + z12**4 + z12**2 + 1)*x**124 + (z12**10 + z12**6 + z12 + 1)*x**123 + (z12**11 + z12**7 + z12**6 + z12**5 + z12**4 + z12**3 + z12)*x**122 + (z12**8 + z12**7 + z12**4 + z12**3 + z12**2 + z12 + 1)*x**121 + (z12**11 + z12**3)*x**120 + (z12**11 + z12**9 + z12**7 + z12**6 + z12**3 + z12 + 1)*x**119 + (z12**11 + z12**10 + z12**3 + z12)*x**118 + (z12**11 + z12**9 + z12**8 + z12**6 + z12**5 + z12**4 + z12**3 + z12**2 + z12 + 1)*x**117 + (z12**9 + z12**7 + z12**5 + z12**4 + z12**3 + z12**2 + 1)*x**116 + (z12**11 + z12**10 + z12**9 + z12**8 + z12**6 + z12**5 + z12**4 + 1)*x**115 + (z12**10 + z12**8 + z12**6 + z12**5 + z12**4 + z12**3 + z12**2 + 1)*x**114 + (z12**10 + z12**9 + z12**8 + z12**6 + z12**5 + 1)*x**113 + (z12**11 + z12**10 + z12**9 + z12**8 + z12**7 + z12**6 + z12**3 + z12**2 + z12 + 1)*x**112 + (z12**6 + z12**4)*x**111 + (z12**11 + z12**9 + z12**7 + z12**6 + z12**5 + z12**3 + z12)*x**110 + (z12**11 + z12**10 + z12**8 + z12**7 + z12**4 + z12**3 + z12)*x**109 + (z12**10 + z12**9 + z12**7 + z12**3 + 1)*x**108 + (z12**9 + z12**7 + z12**4 + z12**2 + z12 + 1)*x**107 + (z12**4 + z12**3 + z12**2)*x**106 + (z12**10 + z12**9 + z12**8 + z12**6 + z12**5 + z12**4 + z12**3 + z12**2 + z12 + 1)*x**105 + (z12**11 + z12**6 + z12**5 + z12**4 + 1)*x**104 + (z12**10 + z12**8 + z12**5 + z12**2 + z12 + 1)*x**103 + (z12**10 + z12**9 + z12**2 + 1)*x**102 + (z12**10 + z12**9 + z12**7 + z12**6 + z12**4 + z12**3)*x**101 + (z12**2 + z12 + 1)*x**100 + (z12**11 + z12**7 + z12**6 + z12**5 + z12**4 + z12**3 + z12**2 + z12)*x**99 + (z12**10 + z12**8 + z12**7 + z12**5 + z12 + 1)*x**98 + (z12**11 + z12**8 + z12**3)*x**97 + (z12**11 + z12**9 + z12**7 + z12**6 + z12**5 + z12**3 + z12 + 1)*x**96 + (z12**9 + z12**8 + z12**5 + z12**4 + z12**3 + z12**2 + 1)*x**95 + (z12**10 + z12**9 + z12**8 + z12**6 + z12**5 + z12**4 + z12**3 + 1)*x**94 + (z12**10 + z12**9 + z12**8 + z12**6 + z12**4 + z12**3 + z12**2 + 1)*x**93 + (z12**8 + z12**7 + z12**6 + z12**5 + z12**3 + z12 + 1)*x**92 + (z12**8 + z12**6 + z12**4 + z12**3 + z12**2 + 1)*x**91 + (z12**10 + z12**9 + z12**6 + z12**3 + z12**2 + z12)*x**90 + (z12**11 + z12**10 + z12**8 + z12**7 + z12**5 + z12**4 + 1)*x**89 + (z12**11 + z12**9 + z12**6 + z12**5 + z12**4 + z12**3 + z12**2 + z12)*x**88 + (z12**10 + z12**9 + z12**8 + z12**5 + z12**4 + z12 + 1)*x**87 + (z12**11 + z12**5 + z12**4 + z12**3 + z12**2)*x**86 + (z12**11 + z12**10 + z12**9 + z12**6 + z12**5 + z12**3 + z12**2)*x**85 + (z12**10 + z12**9 + z12**8 + z12**7 + z12**5 + z12**3 + z12**2 + z12 + 1)*x**84 + (z12**9 + z12**8 + z12**7 + z12**5 + z12**4 + z12**3 + z12**2 + z12)*x**83 + (z12**10 + z12**4 + z12**2 + 1)*x**82 + (z12**11 + z12**6 + z12**5 + z12**4 + z12**3)*x**81 + (z12**9 + z12**8 + z12**7 + z12**6 + z12**5 + z12**4 + z12**3)*x**80 + (z12**7 + z12**5 + z12**4 + z12)*x**79 + (z12**11 + z12**10 + z12**6 + z12**5)*x**78 + (z12**10 + z12**9 + z12**7 + z12**6 + z12**4 + z12)*x**77 + (z12**3 + z12**2)*x**76 + (z12**9 + z12**7 + z12**5 + z12**2 + z12 + 1)*x**75 + (z12**10 + z12**9 + z12**8 + z12**6 + z12**5 + z12**3 + z12)*x**74 + (z12**7 + z12**6 + z12**5 + z12**3 + z12)*x**73 + (z12**11 + z12**9 + z12**8 + z12**7 + z12**6 + z12**2 + 1)*x**72 + (z12**8 + z12**5 + z12**4 + z12**2 + z12 + 1)*x**71 + (z12**9 + z12**8 + z12**4 + z12 + 1)*x**70 + (z12**10 + z12**8 + z12**6 + z12**5 + z12**4 + z12**2 + z12 + 1)*x**69 + (z12**11 + z12**10 + z12**9 + z12**7 + z12**6 + z12**4 + z12**3 + z12**2 + z12)*x**68 + (z12**11 + z12**2 + z12)*x**67 + (z12**11 + z12**10 + z12**9 + z12**8 + z12**4 + z12)*x**66 + (z12**11 + z12**8 + z12**7 + z12**5 + z12**3 + z12**2 + z12 + 1)*x**65 + (z12**11 + z12**10 + z12**8 + z12**7 + z12**6 + z12**4 + z12**2 + z12)*x**64 + (z12**11 + z12**10 + z12**9 + z12**7 + z12**4 + z12**2)*x**63 + (z12**8 + z12**7 + z12**4 + 1)*x**62 + (z12**9 + z12**8 + z12**7 + z12**6 + z12**5 + z12**4 + z12**3 + 1)*x**61 + (z12**11 + z12**10 + z12**9 + z12**6 + z12**5 + z12**3 + z12**2 + z12 + 1)*x**60 + (z12**10 + z12**8 + z12**7 + z12**5 + z12**2 + z12 + 1)*x**59 + (z12**10 + z12**8 + z12**7 + z12**6 + z12**4 + z12)*x**58 + (z12**11 + z12**10 + z12**9 + z12**8 + z12**3 + z12)*x**57 + (z12**9 + z12**8 + z12**6 + z12**5 + z12**3 + z12)*x**56 + (z12**11 + z12**10 + z12**6 + z12**5 + z12**4 + z12**3 + 1)*x**55 + (z12**11 + z12**10 + z12**4 + z12**3 + z12 + 1)*x**54 + (z12**10 + z12**6 + z12**4 + z12**3 + z12**2)*x**53 + (z12**11 + z12**10 + z12**9 + z12**7 + z12**6 + z12**5 + 1)*x**52 + (z12**11 + z12**5 + z12**3 + z12**2 + 1)*x**51 + (z12**10 + z12**9 + z12**8 + z12**6 + z12**4 + z12**3 + z12**2 + z12)*x**50 + (z12**10 + z12**8 + z12**7 + z12**6 + z12**5)*x**49 + (z12**10 + z12**9 + z12**8 + z12**7 + z12**6 + z12**5 + z12**4 + z12**2 + z12)*x**48 + (z12**11 + z12**8 + z12**7 + z12**5 + z12**4 + z12**2)*x**47 + (z12**11 + z12**10 + z12**9 + z12**8 + z12**6 + z12**4 + z12**3 + z12)*x**46 + (z12**11 + z12**10 + z12**8 + z12**6 + z12**3 + 1)*x**45 + (z12**11 + z12**7 + z12**6 + z12**4 + z12**3 + z12**2 + z12)*x**44 + (z12**8 + z12**7 + z12**5 + z12**3 + z12 + 1)*x**43 + (z12**11 + z12**9 + z12**8 + z12**4 + z12**2 + z12 + 1)*x**42 + (z12**11 + z12**7 + z12**5 + z12**4 + z12**3 + z12 + 1)*x**41 + (z12**11 + z12**9 + z12**8 + z12**4 + z12**3 + z12**2 + z12 + 1)*x**40 + (z12**10 + z12**9 + z12**8 + z12**7 + z12**6 + z12**4 + z12 + 1)*x**39 + (z12**11 + z12**10 + z12**7 + z12**5 + z12)*x**38 + (z12**9 + z12**4 + z12**3 + z12**2 + 1)*x**37 + (z12**8 + z12**6 + z12**5 + z12**3 + z12**2 + z12)*x**36 + (z12**11 + z12**10 + z12**8 + z12**4 + z12**3 + z12)*x**35 + (z12**11 + z12**7 + z12**6 + z12**2 + z12 + 1)*x**34 + (z12**11 + z12**10 + z12**5 + z12**4 + z12**2 + 1)*x**33 + (z12**11 + z12**9 + z12**7 + z12**2 + z12 + 1)*x**32 + (z12**6 + z12**5 + z12**3 + z12)*x**31 + (z12**9 + z12**8 + z12**7 + z12**6 + z12 + 1)*x**30 + (z12**11 + z12**8 + z12**6 + z12**4 + z12**2)*x**29 + (z12**10 + z12**9 + z12**5 + z12**3 + z12**2)*x**28 + (z12**11 + z12**7 + z12**6 + z12**5 + z12**3)*x**27 + (z12**11 + z12**10 + z12**8 + z12**7 + z12**6 + z12**3 + z12**2)*x**26 + (z12**9 + z12**6 + z12**2)*x**25 + (z12**8 + z12**7 + z12**2 + 1)*x**24 + (z12**11 + z12**9 + z12**4 + z12**2)*x**23 + (z12**9 + z12**7 + z12**2 + z12 + 1)*x**22 + (z12**11 + z12**9 + z12**7 + z12**6 + z12**4 + z12**3 + z12**2 + z12 + 1)*x**21 + (z12**7 + z12**4 + z12**2 + z12)*x**20 + (z12**11 + z12**8 + z12**7 + z12**5 + z12**2)*x**19 + (z12**10 + z12**6 + z12**3 + z12 + 1)*x**18 + (z12**9 + z12**3 + z12**2 + z12 + 1)*x**17 + (z12**11 + z12**8 + z12**7 + z12**6 + z12**5 + z12**3 + z12**2)*x**16 + (z12**11 + z12**10 + z12**7 + z12**6 + z12**4 + z12**3 + z12)*x**15 + (z12**11 + z12**9 + z12**8 + z12**7 + z12 + 1)*x**14 + (z12**11 + z12**7 + z12**6 + z12**5 + z12**4 + 1)*x**13 + (z12**10 + z12**9 + z12**7 + z12**6 + z12**5 + z12**4 + z12**2 + z12 + 1)*x**12 + (z12**11 + z12**10 + z12**6)*x**11 + (z12**10 + z12**9 + z12**8 + z12**4 + z12**3 + z12**2)*x**10 + (z12**8 + z12**7 + z12**4 + z12**3)*x**9 + (z12**9 + z12**7 + z12**5 + z12**3 + z12)*x**8 + (z12**11 + z12**9 + z12**7 + z12**6 + z12**5 + z12**4 + z12**3 + z12 + 1)*x**7 + (z12**11 + z12**10 + z12**9 + z12**7 + z12**4 + z12 + 1)*x**6 + (z12**10 + z12**8 + z12**7 + z12**5 + z12**4 + z12**3 + z12)*x**5 + (z12**11 + z12**10 + z12**9 + z12**8 + z12**7 + z12**6 + z12**4 + z12**2 + z12 + 1)*x**4 + (z12**10 + z12**9 + z12**5 + z12**3 + z12 + 1)*x**3 + (z12**10 + z12**8 + z12**5 + z12**4 + z12**2 + z12)*x**2 + (z12**11 + z12**10 + z12**9 + z12**8 + z12**5 + z12**2 + z12 + 1)*x + z12**9 + z12**8 + z12**7 + z12**6 + z12**5 + z12**3 + z12 + 1

_r, enc = encrypt(flag, F, f)

print(f'f = {f}')
print(f'c = {enc}')
print(_r)