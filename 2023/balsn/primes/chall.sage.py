

# This file was *autogenerated* from the file chall.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_256 = Integer(256); _sage_const_512 = Integer(512); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_7 = Integer(7); _sage_const_11 = Integer(11); _sage_const_13 = Integer(13); _sage_const_17 = Integer(17); _sage_const_19 = Integer(19); _sage_const_23 = Integer(23); _sage_const_29 = Integer(29); _sage_const_31 = Integer(31); _sage_const_37 = Integer(37); _sage_const_41 = Integer(41); _sage_const_43 = Integer(43); _sage_const_47 = Integer(47); _sage_const_53 = Integer(53); _sage_const_59 = Integer(59); _sage_const_61 = Integer(61); _sage_const_67 = Integer(67); _sage_const_71 = Integer(71); _sage_const_73 = Integer(73); _sage_const_79 = Integer(79); _sage_const_83 = Integer(83); _sage_const_89 = Integer(89); _sage_const_97 = Integer(97); _sage_const_8 = Integer(8)
import gmpy2
import random
# from secret import FLAG
FLAG = "adehaskjdhajksdajs"
def main():
	n = int(input("prime: "))

	if n <= _sage_const_0 :
		print("No mystiz trick")
	elif n.bit_length() < _sage_const_256  or n.bit_length() > _sage_const_512 :
		print("Not in range")
	elif not is_prime(n):
		print("Not prime")
	else:
		x = int(input("factor: "))

		if x > _sage_const_1  and x < n and n % x == _sage_const_0 :
			print("You got me")
			print(FLAG)
		else:
			print("gg")

def is_prime(n):
	# check if n = a^b for some a, b > 1
	for i in range(_sage_const_2 , n.bit_length()):
		root, is_exact = gmpy2.iroot(n, i)
		if is_exact:
			return False

	rs = [_sage_const_2 , _sage_const_3 , _sage_const_5 , _sage_const_7 , _sage_const_11 , _sage_const_13 , _sage_const_17 , _sage_const_19 , _sage_const_23 , _sage_const_29 , _sage_const_31 , _sage_const_37 , _sage_const_41 , _sage_const_43 , _sage_const_47 , _sage_const_53 , _sage_const_59 , _sage_const_61 , _sage_const_67 , _sage_const_71 , _sage_const_73 , _sage_const_79 , _sage_const_83 , _sage_const_89 , _sage_const_97 ]
	return all(test(n, r) for r in rs)

def test(n, r):
	"""
	check whether `(x + a) ^ n = x ^ n + a (mod x ^ r - 1)` in Z/nZ for some `a`.
	"""
	R = Zmod(n)['x']; (x,) = R._first_ngens(1)
	S = R.quotient_ring(x ** r - _sage_const_1 )
	a = _sage_const_1  + random.getrandbits(_sage_const_8 )
	print(a, S(x + a)**n, S(x)**n + S(a)**n)
	if S(x + a) ** n != S(x ** (n % r)) + a:
		return False
	return True

if __name__ == "__main__":
	main()

