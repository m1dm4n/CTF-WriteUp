from Crypto.Cipher import AES


ct = eval(open("./public/leaked_traces/ciphertext.json", "rb").read())
ft = eval(open("./public/leaked_traces/faulty_ciphertext.json", "rb").read())

sbox = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
)

rcon = (0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36)
Xs = set()


def g(word, round):
    v_0 = word[0]
    v_1 = word[1]
    v_2 = word[2]
    v_3 = word[3]

    v_0 = sbox[v_0]
    v_1 = sbox[v_1]
    v_2 = sbox[v_2]
    v_3 = sbox[v_3]

    v_1 ^= rcon[round]

    return bytes([v_1, v_2, v_3, v_0])


def gf_mul123(inp, factor):
    if (factor == 1):
        return inp
    elif (factor == 2):
        c = inp << 1
        if ((inp >> 7) & 1) == 1:
            c ^= 0x11b
        return c
    elif (factor == 3):
        return (gf_mul123(inp, 2) ^ inp)
    print("Whats wrong with you, it says mul123 not 4")
    exit(0)


def key_cand_col(ct, ft, idxs):
    # idxs = [0, 13, 10, 7]
    Ys = set()
    needs = [ft[ind] ^ ct[ind] for ind in idxs]

    def dfs(X, cur, l):
        if l == 4:
            Ys.add(tuple(cur))
            return

        for y in range(256):
            if sbox[y] ^ sbox[y ^ X[l]] == needs[l]:
                cur.append(y)
                dfs(X, cur, l+1)
                cur.pop(-1)

    for X in Xs:
        dfs(X, [], 0)
    print(len(Ys))
    round_key_cands = set()
    for Y in Ys:
        round_key_cands.add(tuple(sbox[Y[i]] ^ ct[idxs[i]] for i in range(4)))
    return round_key_cands


def recover_col_key(idxs, ct1, ct2, ft1, ft2):
    k0 = key_cand_col(ct1, ft1, idxs)
    k1 = key_cand_col(ct2, ft2, idxs)
    return list(k0 & k1)[0]


def reverse_key_schedule(round_key: bytes, aes_round: int):
    assert len(round_key) * 8 == 128

    def xor_bytes(aa, bb) -> bytes:
        return bytes(a ^ b for a, b in zip(aa, bb))
    for i in range(aes_round - 1, -1, -1):
        a2 = round_key[0:4]
        b2 = round_key[4:8]
        c2 = round_key[8:12]
        d2 = round_key[12:16]

        d1 = xor_bytes(d2, c2)
        c1 = xor_bytes(c2, b2)
        b1 = xor_bytes(b2, a2)
        a1 = xor_bytes(a2, g(d1, i))

        round_key = a1 + b1 + c1 + d1

    return round_key


for fault_ind in range(4):
    for j in range(256):
        e = [0]*fault_ind + [j] + [0]*(3 - fault_ind)
        state_e = [0, 0, 0, 0]
        state_e[0] = gf_mul123(e[0], 2) ^ gf_mul123(e[1], 3) ^ gf_mul123(e[2], 1) ^ gf_mul123(e[3], 1)
        state_e[1] = gf_mul123(e[0], 1) ^ gf_mul123(e[1], 2) ^ gf_mul123(e[2], 3) ^ gf_mul123(e[3], 1)
        state_e[2] = gf_mul123(e[0], 1) ^ gf_mul123(e[1], 1) ^ gf_mul123(e[2], 2) ^ gf_mul123(e[3], 3)
        state_e[3] = gf_mul123(e[0], 3) ^ gf_mul123(e[1], 1) ^ gf_mul123(e[2], 1) ^ gf_mul123(e[3], 2)
        # print(state_e)
        Xs.add(tuple(state_e))


key10 = [0]*16
key10[0], key10[13], key10[10], key10[7] = recover_col_key([0, 13, 10, 7], ct[0], ct[1], ft[0], ft[1])
key10[4], key10[1], key10[14], key10[11] = recover_col_key([4,  1, 14, 11], ct[0], ct[1], ft[0], ft[1])
key10[8], key10[5], key10[2], key10[15] = recover_col_key([8,  5,  2, 15], ct[0], ct[1], ft[0], ft[1])
key10[12], key10[9], key10[6], key10[3] = recover_col_key([12,  9,  6,  3], ct[0], ct[1], ft[0], ft[1])

print("key at round 10:", key10)
key = reverse_key_schedule(bytes(key10), 10)
print("key:", key.hex())
enc_flag = eval(open("./public/leaked_traces/secret_ingredient.json", "rb").read())
flag = AES.new(key, AES.MODE_ECB).decrypt(bytes(enc_flag))
print(flag.decode('utf8'))
